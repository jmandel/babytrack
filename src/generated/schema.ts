export const schema = "export {};\n\n/**\n * @schema NewbornEvent\n * \n * # Newborn Tracker Data Model\n * \n * This documentation describes the data model used to track a variety of baby-care events in a newborn tracking application.\n * Each event is captured as a single object with a defined `eventType`, optional `subType`, and a `details` field specific to the event.\n * This model supports feeding, diaper changes, pumping, sleep and awake times, medical records, growth measurements, and baby milestones.\n * \n * ## Overview\n * \n * 1. **Event Types**  \n *    Each baby-care event is categorized under one of the `EventType` values:\n *    - `feeding`\n *    - `pumping`\n *    - `diaper`\n *    - `sleep`\n *    - `awake`\n *    - `medical`\n *    - `growth`\n *    - `milestone`\n * \n * 2. **Sub-Types**  \n *    Within certain event types, we use a second discriminator to further refine the category:\n *    - **Feeding** uses `FeedingType` (`breast`, `bottle`, `formula`, `solids`).\n *    - **Medical** uses `MedicalEventType` (`medication`, `temperature`, `symptom`, `treatment`, `vaccination`).\n * \n * 3. **Time Zone Guidance**\n *    Since we store timestamps in ISO8601 local time with offset:\n *    - Always include the local time zone offset in the timestamp, e.g. `2025-01-08T10:15:00-05:00`\n *    - When rendering data to the user, your application should:\n *      1. Parse the stored ISO8601 string\n *      2. Convert or display it in the user's local time zone as appropriate\n */\n\n/**\n * Base event interface that all other event types extend.\n */\nexport interface BaseEvent {\n  /**\n   * Unique identifier for the event.\n   * - For new events: DO NOT include this field\n   * - For updates: MUST include this field\n   */\n  id?: string;\n\n  /**\n   * When the event occurred.\n   * - Required for all events\n   * - Use ISO-8601 format with timezone offset\n   * - Defaults to current time if not specified\n   */\n  occurredAt: string;\n\n  /**\n   * When the event ended (for duration-based events).\n   * - Optional\n   * - Use ISO-8601 format with timezone offset\n   * - Only used for events that have a duration (e.g., sleep, feeding)\n   */\n  endedAt?: string;\n\n  /**\n   * Additional notes or observations about the event.\n   * - Optional\n   * - Only include when explicitly provided\n   * - Should contain user observations, not system actions\n   * - Don't repeat information captured in other fields\n   */\n  notes?: string;\n\n  /**\n   * Who created this event\n   * - Optional\n   * - Used for audit/tracking\n   */\n  createdBy?: string;\n\n  /**\n   * Device identifier that created this event\n   * - Optional\n   * - Used for sync/conflict resolution\n   */\n  deviceId?: string;\n}\n\n/**\n * Enums for various event types and categories\n */\nexport enum FeedingType {\n  Bottle = \"BOTTLE\",\n  Nursing = \"NURSING\",\n  Solids = \"SOLIDS\",\n}\n\nexport enum BottleContentType {\n  Formula = \"FORMULA\",\n  BreastMilk = \"BREAST_MILK\",\n  Water = \"WATER\",\n  Fortifier = \"FORTIFIER\",\n}\n\nexport enum SolidFoodConsistency {\n  Puree = \"PUREE\",\n  Mashed = \"MASHED\",\n  Finger = \"FINGER\",\n  Table = \"TABLE\",\n}\n\nexport enum MeasurementUnit {\n  KG = \"kg\",\n  G = \"g\",\n  CM = \"cm\",\n  IN = \"in\",\n  ML = \"ml\",\n}\n\nexport enum DosageUnit {\n  MG = \"mg\",\n  ML = \"ml\",\n  UNITS = \"units\",\n}\n\nexport enum MedicalEventType {\n  Medication = \"MEDICATION\",\n  Temperature = \"TEMPERATURE\",\n  Symptom = \"SYMPTOM\",\n  Treatment = \"TREATMENT\",\n  Vaccination = \"VACCINATION\",\n}\n\nexport enum MeasurementType {\n  Weight = \"WEIGHT\",\n  Length = \"LENGTH\",\n  HeadCircumference = \"HEAD_CIRCUMFERENCE\",\n}\n\nexport enum PumpingMethod {\n  Manual = \"MANUAL\",\n  Electric = \"ELECTRIC\",\n  Hakaa = \"HAKAA\",\n}\n\nexport enum BreastSide {\n  Left = \"LEFT\",\n  Right = \"RIGHT\",\n  Both = \"BOTH\",\n}\n\n/**\n * Feeding-related interfaces\n */\nexport interface BottleContent {\n  type: BottleContentType;\n  amountMl: number;\n}\n\nexport interface BottleFeedingDetails {\n  contents: BottleContent[];\n  amountMlOffered: number;\n  amountMlConsumed?: number;\n}\n\nexport interface NursingAttempt {\n  side: BreastSide;\n  startedAt?: string;\n  endedAt?: string;\n  durationMinutes?: number;\n  letdown?: boolean;\n  goodLatch?: boolean;\n}\n\nexport interface NursingDetails {\n  attempts: NursingAttempt[];\n}\n\nexport interface SolidFoodDetails {\n  consistency: SolidFoodConsistency;\n  foods: string[];\n  acceptance: \"none\" | \"some\" | \"most\" | \"all\" | \"refused\";\n  amountOffered?: string;\n}\n\nexport interface BaseFeedingEvent extends BaseEvent {\n  eventType: EventType.Feeding;\n  subType: FeedingType;\n  details: BottleFeedingDetails | NursingDetails | SolidFoodDetails;\n}\n\nexport interface BottleFeedingEvent extends BaseFeedingEvent {\n  subType: FeedingType.Bottle;\n  details: BottleFeedingDetails;\n}\n\nexport interface NursingFeedingEvent extends BaseFeedingEvent {\n  subType: FeedingType.Nursing;\n  details: NursingDetails;\n}\n\nexport interface SolidsFeedingEvent extends BaseFeedingEvent {\n  subType: FeedingType.Solids;\n  details: SolidFoodDetails;\n}\n\nexport type FeedingEvent = BottleFeedingEvent | NursingFeedingEvent | SolidsFeedingEvent;\n\n/**\n * Pumping-related interfaces\n */\nexport interface PumpingDetails {\n  side: BreastSide;\n  durationMinutes: number;\n  amountMl: number;\n  letdown?: boolean;\n  method?: PumpingMethod;\n}\n\nexport interface PumpingEvent extends BaseEvent {\n  eventType: EventType.Pumping;\n  details: PumpingDetails;\n}\n\n/**\n * Diaper-related interfaces\n */\nexport interface UrineDetails {\n  volume: \"small\" | \"medium\" | \"large\";\n  color?: \"clear\" | \"pale\" | \"dark\" | \"amber\" | \"other\";\n  concentrated?: boolean;\n}\n\nexport interface StoolDetails {\n  volume?: \"small\" | \"medium\" | \"large\";\n  color?: \"yellow\" | \"brown\" | \"green\" | \"black\" | \"red\";\n  consistency?: \"watery\" | \"loose\" | \"soft\" | \"formed\" | \"hard\" | \"seedy\" | \"tarry\";\n  mucus?: boolean;\n  blood?: boolean;\n}\n\nexport interface DiaperCondition {\n  rash?: {\n    severity: \"mild\" | \"moderate\" | \"severe\";\n    location: string[];\n  };\n  leakage?: boolean;\n}\n\nexport interface DiaperEvent extends BaseEvent {\n  eventType: EventType.Diaper;\n  details: {\n    urine?: UrineDetails;\n    stool?: StoolDetails;\n    condition?: DiaperCondition;\n  };\n}\n\n/**\n * Sleep and Awake interfaces\n */\nexport interface SleepEvent extends BaseEvent {\n  eventType: EventType.Sleep;\n  details: {\n    sleepLocation?: string;\n  };\n}\n\nexport interface AwakeEvent extends BaseEvent {\n  eventType: EventType.Awake;\n  details: {\n    activity?: string;\n    mood?: \"happy\" | \"fussy\" | \"neutral\";\n  };\n}\n\n/**\n * Medical-related interfaces\n */\nexport interface BaseMedicalEvent extends BaseEvent {\n  eventType: EventType.Medical;\n  subType: MedicalEventType;\n  details: any;\n}\n\nexport interface MedicationEvent extends BaseMedicalEvent {\n  subType: MedicalEventType.Medication;\n  details: {\n    medication: string;\n    dosageAmount: number;\n    dosageUnit: DosageUnit;\n    route: \"oral\" | \"topical\" | \"injection\" | \"other\";\n  };\n}\n\nexport interface TemperatureEvent extends BaseMedicalEvent {\n  subType: MedicalEventType.Temperature;\n  details: {\n    temperature: number;\n    unit: \"C\" | \"F\";\n    method: \"oral\" | \"rectal\" | \"axillary\" | \"temporal\";\n  };\n}\n\nexport interface SymptomEvent extends BaseMedicalEvent {\n  subType: MedicalEventType.Symptom;\n  details: {\n    symptom: string;\n    severity: \"mild\" | \"moderate\" | \"severe\";\n    duration?: {\n      value: number;\n      unit: \"minutes\" | \"hours\" | \"days\";\n    };\n  };\n}\n\nexport interface TreatmentEvent extends BaseMedicalEvent {\n  subType: MedicalEventType.Treatment;\n  details: {\n    treatment: string;\n    provider?: string;\n    followUp?: string;\n  };\n}\n\nexport interface VaccinationEvent extends BaseMedicalEvent {\n  subType: MedicalEventType.Vaccination;\n  details: {\n    vaccine: string;\n    dose: number;\n    site?: string;\n    provider?: string;\n  };\n}\n\nexport type MedicalEvent =\n  | MedicationEvent\n  | TemperatureEvent\n  | SymptomEvent\n  | TreatmentEvent\n  | VaccinationEvent;\n\n/**\n * Growth-related interfaces\n */\nexport interface Measurement {\n  type: MeasurementType;\n  value: number;\n  unit: MeasurementUnit;\n}\n\nexport interface GrowthEvent extends BaseEvent {\n  eventType: EventType.Growth;\n  details: {\n    measurements: Measurement[];\n  };\n}\n\n/**\n * Milestone interface\n */\nexport interface MilestoneEvent extends BaseEvent {\n  eventType: EventType.Milestone;\n  details: {\n    milestone: string;\n    category?: \"motor\" | \"cognitive\" | \"social\" | \"language\";\n  };\n}\n\n/**\n * @schema EventType\n * The type of event being logged.\n */\nexport enum EventType {\n  Feeding = 'FEEDING',\n  Pumping = 'PUMPING',\n  Diaper = 'DIAPER',\n  Sleep = 'SLEEP',\n  Awake = 'AWAKE',\n  Medical = 'MEDICAL',\n  Growth = 'GROWTH',\n  Milestone = 'MILESTONE'\n}\n\n/**\n * Master union type for all possible events\n */\nexport type NewbornEvent =\n  | FeedingEvent\n  | PumpingEvent\n  | DiaperEvent\n  | SleepEvent\n  | AwakeEvent\n  | MedicalEvent\n  | GrowthEvent\n  | MilestoneEvent; ";